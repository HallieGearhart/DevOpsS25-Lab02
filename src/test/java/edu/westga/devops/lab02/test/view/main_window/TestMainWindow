package edu.westga.devops.lab02.test.view.main_window;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;

import javafx.fxml.FXMLLoader;
import javafx.collections.ObservableList;
import javafx.embed.swing.JFXPanel;
import javafx.scene.control.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import edu.westga.devops.lab02.Main;

public class TestMainWindow  {
    private MainWindow controller;

    // Mock UI controls
    private TextField itemNameField;
    private TextField quantityField;
    private ListView<String> shoppingListView;
    private Label errorLabel;

    @BeforeEach
    void setUp() {
        new JFXPanel();

        controller = new MainWindow();

        itemNameField = new TextField();
        quantityField = new TextField();
        shoppingListView = new ListView<>();
        errorLabel = new Label();

        controller.itemNameField = itemNameField;
        controller.quantityField = quantityField;
        controller.shoppingListView = shoppingListView;
        controller.errorLabel = errorLabel;

        controller.initialize();
    }

    @Test
    void addItem_validName_itemAddedToList() {
        itemNameField.setText("Apples");
        controller.handleAddItem();

        ObservableList<String> items = shoppingListView.getItems();
        assertEquals(1, items.size());
        assertTrue(items.get(0).contains("Apples"));
        assertEquals("", errorLabel.getText());
    }

    @Test
    void addItem_emptyName_errorShown() {
        itemNameField.setText("");
        controller.handleAddItem();

        assertEquals(0, shoppingListView.getItems().size());
        assertEquals("Item name cannot be empty.", errorLabel.getText());
    }

    @Test
    void removeItem_selectedItem_itemRemoved() {
        itemNameField.setText("Milk");
        controller.handleAddItem();
        shoppingListView.getSelectionModel().select(0);

        controller.handleRemoveItem();

        assertEquals(0, shoppingListView.getItems().size());
        assertEquals("", errorLabel.getText());
    }

    @Test
    void removeItem_noSelection_errorShown() {
        controller.handleRemoveItem();
        assertEquals("Select an item to remove.", errorLabel.getText());
    }

    @Test
    void updateQuantity_validQuantity_quantityUpdated() {
        itemNameField.setText("Eggs");
        controller.handleAddItem();
        shoppingListView.getSelectionModel().select(0);
        quantityField.setText("3");

        controller.handleUpdateQuantity();

        String updatedItem = shoppingListView.getItems().get(0);
        assertTrue(updatedItem.contains("Qty: 3"));
        assertEquals("", errorLabel.getText());
    }

    @Test
    void updateQuantity_noSelection_errorShown() {
        quantityField.setText("2");
        controller.handleUpdateQuantity();
        assertEquals("Select an item to update.", errorLabel.getText());
    }

    @Test
    void updateQuantity_invalidQuantity_errorShown() {
        itemNameField.setText("Bread");
        controller.handleAddItem();
        shoppingListView.getSelectionModel().select(0);
        quantityField.setText("-1");

        controller.handleUpdateQuantity();

        assertEquals("Quantity must be greater than 0.", errorLabel.getText());
    }

    @Test
    void updateQuantity_notANumber_errorShown() {
        itemNameField.setText("Juice");
        controller.handleAddItem();
        shoppingListView.getSelectionModel().select(0);
        quantityField.setText("abc");

        controller.handleUpdateQuantity();

        assertEquals("Enter a valid number.", errorLabel.getText());
    }
}
